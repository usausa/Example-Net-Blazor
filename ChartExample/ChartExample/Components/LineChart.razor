<svg xmlns="http://www.w3.org/2000/svg" width="@ChartWidth" height="@ChartHeight">

    <defs>
        <clipPath id="chart">
            <rect x="@CanvasLeft" y="@CanvasTop" width="@Width" height="@Height" />
        </clipPath>
    </defs>

    <rect x="0" y="0" width="@ChartWidth" height="@ChartHeight" fill="white" />

    <!-- Border -->
    <g>
        <rect x="@(CanvasLeft - CanvasBorderWidth)" y="@(CanvasTop - CanvasBorderWidth)" width="@(Width + (CanvasBorderWidth * 2))" height="@(Height + (CanvasBorderWidth * 2))" fill="@CanvasBorderColor" />
        <rect x="@CanvasLeft" y="@CanvasTop" width="@Width" height="@Height" fill="@CanvasBackgroundColor" />
    </g>

    <!-- Label -->
    <g>
        <text x="@CanvasLeft" y="0" dominant-baseline="text-before-edge" style="text-anchor: end; fill: @LabelTextColor; font-size: @LabelFontSize;">@label1</text>
        <text x="@(Width + CanvasLeft)" y="0" dominant-baseline="text-before-edge" style="text-anchor: start; fill: @LabelTextColor; font-size: @LabelFontSize;">@label2</text>
    </g>

    <!-- Y Axis -->
    <g clip-path="url(#chart)">
        <ListItem Items="value1Axis">
            <ItemTemplate Context="entry">
                <Condition Value="entry.DrawLine">
                    <line x1="@CanvasLeft" y1="@entry.Position" x2="@(CanvasLeft + Width)" y2="@entry.Position" stroke-width="@AxisLineWidth" stroke="@entry.LineColor" stroke-dasharray="@AxisLineDashArray" />
                </Condition>
            </ItemTemplate>
        </ListItem>
    </g>
    <g>
        <ListItem Items="value1Axis">
            <ItemTemplate Context="entry">
                <text x="@(CanvasLeft - AxisMargin)" y="@entry.Position" dominant-baseline="central" style="text-anchor: end; fill: @ValueAxisTextColor; font-size: @ValueAxisFontSize;">@entry.Text</text>
            </ItemTemplate>
        </ListItem>
    </g>
    <g>
        <ListItem Items="value2Axis">
            <ItemTemplate Context="entry">
                <text x="@(CanvasLeft + Width + AxisMargin)" y="@entry.Position" dominant-baseline="central" style="text-anchor: start; fill: @ValueAxisTextColor; font-size: @ValueAxisFontSize;">@entry.Text</text>
            </ItemTemplate>
        </ListItem>
    </g>

    <!-- X Axis -->
    <g clip-path="url(#chart)">
        <ListItem Items="timeAxis">
            <ItemTemplate Context="entry">
                <Condition Value="entry.DrawLine">
                    <line x1="@entry.Position" y1="@CanvasTop" x2="@entry.Position" y2="@(CanvasTop + Height)" stroke-width="@AxisLineWidth" stroke="@entry.LineColor" stroke-dasharray="@AxisLineDashArray" />
                </Condition>
            </ItemTemplate>
        </ListItem>
    </g>
    <g>
        <ListItem Items="timeAxis">
            <ItemTemplate Context="entry">
                <text x="@entry.Position" y="@(CanvasTop + Height + AxisMargin)" dominant-baseline="text-before-edge" style="text-anchor: middle; fill: @TimeAxisTextColor; font-size: @TimeAxisFontSize;">@entry.Text</text>
            </ItemTemplate>
        </ListItem>
    </g>

    <!-- Chart -->
    <g clip-path="url(#chart)">
        <ListItem Items="lines">
            <ItemTemplate Context="line">
                <path stroke-width="@line.Width" stroke="@line.Color" fill="none" d="@line.Data" />
            </ItemTemplate>
        </ListItem>
    </g>

    <!-- Legend -->
    <ListItem Items="legends">
        <ItemTemplate Context="entry">
            <rect x="@entry.X" y="@(entry.Y + ((LegendHeight - LegendMarkerSize) / 2))" width="@LegendMarkerSize" height="@LegendMarkerSize" fill="@entry.MarkerColor" />

        </ItemTemplate>
    </ListItem>

@*
<g>
        <!-- Data1 -->
        <rect x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30 - 60 - 10 - 2)" y="@(CanvasTop + Height + 20 + 1)" width="10" height="10" fill="#00e676" />
        <text x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30 - 60)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">測定値1</text>

        <text x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">最小値</text>
        <text x="@(LegendCenter - 20 - 80 - 30 - 20)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">99999999.99</text>

        <text x="@(LegendCenter - 20 - 80 - 30)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">最大値</text>
        <text x="@(LegendCenter - 20)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">99999999.99</text>

        <rect x="@(LegendCenter + 20)" y="@(CanvasTop + Height + 20 + 1)" width="10" height="10" fill="#ff9100" />
        <text x="@(LegendCenter + 20 + 12)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">項目1閾値1</text>
        <text x="@(LegendCenter + 20 + 60 + 80)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">99999999.99</text>

        <rect x="@(LegendCenter + 20 + 60 + 80 + 40)" y="@(CanvasTop + Height + 20 + 1)" width="10" height="10" fill="#ff1744" />
        <text x="@(LegendCenter + 20 + 60 + 80 + 40 + 12)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">項目1閾値2</text>
        <text x="@(LegendCenter + 20 + 60 + 80 + 40 + 60 + 80)" y="@(CanvasTop + Height + 20 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">99999999.99</text>

        <!-- Data2 -->
        <rect x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30 - 60 - 10 - 2)" y="@(CanvasTop + Height + 34 + 1)" width="10" height="10" fill="#2979ff" />
        <text x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30 - 60)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">測定値2</text>

        <text x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">最小値</text>
        <text x="@(LegendCenter - 20 - 80 - 30 - 20)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">0.00</text>

        <text x="@(LegendCenter - 20 - 80 - 30)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">最大値</text>
        <text x="@(LegendCenter - 20)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">0.00</text>

        <rect x="@(LegendCenter + 20)" y="@(CanvasTop + Height + 34 + 1)" width="10" height="10" fill="#ff9100" />
        <text x="@(LegendCenter + 20 + 12)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">項目2閾値1</text>
        <text x="@(LegendCenter + 20 + 60 + 80)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">0.00</text>

        <rect x="@(LegendCenter + 20 + 60 + 80 + 40)" y="@(CanvasTop + Height + 34 + 1)" width="10" height="10" fill="#ff1744" />
        <text x="@(LegendCenter + 20 + 60 + 80 + 40 + 12)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">項目2閾値2</text>
        <text x="@(LegendCenter + 20 + 60 + 80 + 40 + 60 + 80)" y="@(CanvasTop + Height + 34 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">0.00</text>

        <!-- Data3 -->
        <rect x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30 - 60 - 10 - 2)" y="@(CanvasTop + Height + 48 + 1)" width="10" height="10" fill="#00e5ff" />
        <text x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30 - 60)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">測定値3</text>

        <text x="@(LegendCenter - 20 - 80 - 30 - 20 - 80 - 30)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">最小値</text>
        <text x="@(LegendCenter - 20 - 80 - 30 - 20)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">0.00</text>

        <text x="@(LegendCenter - 20 - 80 - 30)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">最大値</text>
        <text x="@(LegendCenter - 20)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">100.00</text>

        <rect x="@(LegendCenter + 20)" y="@(CanvasTop + Height + 48 + 1)" width="10" height="10" fill="#ff9100" />
        <text x="@(LegendCenter + 20 + 12)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">項目3閾値1</text>
        <text x="@(LegendCenter + 20 + 60 + 80)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">0.00</text>

        <rect x="@(LegendCenter + 20 + 60 + 80 + 40)" y="@(CanvasTop + Height + 48 + 1)" width="10" height="10" fill="#ff1744" />
        <text x="@(LegendCenter + 20 + 60 + 80 + 40 + 12)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: start; fill: @LegendTextColor; font-size: @LegendFontSize;">項目3閾値2</text>
        <text x="@(LegendCenter + 20 + 60 + 80 + 40 + 60 + 80)" y="@(CanvasTop + Height + 48 + 6)" dominant-baseline="central" style="text-anchor: end; fill: @LegendTextColor; font-size: @LegendFontSize;">100.00</text>
   //private double LegendCenter => MarginLeft + (Width / 2);
    </g>
*@
</svg>

@code {
#pragma warning disable CA1823
    private const double MarginLeft = 70;
    private const double MarginRight = 70;
    private const double MarginTop = 20;
    private const double MarginBottom = 20;

    private const double CanvasLeft = MarginLeft;
    private const double CanvasTop = MarginTop;

    private const string CanvasBackgroundColor = "white";

    private const double CanvasBorderWidth = 0.5;
    private const string CanvasBorderColor = "#424242";

    private const double LegendHeight = 12;
    private const double LegendMarginY = 2;

    private const double LegendTextWidth = 70;
    private const double LegendSubTextWidth = 40;
    private const double LegendValueWidth = 70;
    private const double LegendValueMargin = 40;
    private const double LegendSubValueMargin = 20;

    private const double LegendMarkerSize = 10;
    private const double LegendMarkerMargin = 2;

    private const string LegendTextColor = "#212121";
    private const string LegendFontSize = "8pt";

    private const string LabelTextColor = "#212121";
    private const string LabelFontSize = "8pt";

    private const double AxisLineWidth = 0.5;
    private const string AxisLineColor = "#757575";
    private const string AxisLineColor2 = "#ff5252";
    private const string AxisLineDashArray = "2 2";

    private const double AxisMargin = 2;

    private const string ValueAxisTextColor = "#616161";
    private const string ValueAxisFontSize = "8pt";

    private const string TimeAxisTextColor = "#616161";
    private const string TimeAxisFontSize = "8pt";

    private const double ValuePathWidth = 0.75;
    private const double ThresholdPathWidth = 1;
#pragma warning restore CA1823

    private static readonly long TimeHour = TimeSpan.FromHours(1).Ticks;

    private bool changed;

    private IChartSource? source;

    // Data

    private readonly List<LegendEntry> legends = new();

    private string? label1;
    private string? label2;

    private readonly List<AxisEntry> timeAxis = new();

    private readonly List<AxisEntry> value1Axis = new();
    private readonly List<AxisEntry> value2Axis = new();

    private readonly List<PathEntry> lines = new();

    // Parameter

    [Parameter]
    public ChartBuildOption? BuildOption { get; set; }

    [Parameter]
    public IChartSource? Source
    {
        get => source;
        set
        {
            if (source != value)
            {
                source = value;
                changed = true;
            }
        }
    }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public int Height { get; set; }

    // Property

    private double ChartWidth => Width + MarginLeft + MarginRight;

    private double ChartHeight => Height + MarginTop + MarginBottom + (LegendHeight * legends.Count) + (LegendMarginY * Math.Max(legends.Count - 1, 0));

    protected override void OnParametersSet()
    {
        if (changed)
        {
            Build();
            changed = true;
        }
    }

    private void Build()
    {
        legends.Clear();
        lines.Clear();
        timeAxis.Clear();
        value1Axis.Clear();
        value2Axis.Clear();

        if ((source is null) || (BuildOption is null))
        {
            return;
        }

        // Label
        label1 = BuildOption.Label1;
        label2 = BuildOption.Label2;

        // Legend
        var legendWidth = LegendTextWidth + ((LegendSubTextWidth + LegendValueWidth) * 2) +
                          ((LegendValueMargin + LegendTextWidth + LegendValueWidth) * (source.Legends.Any(x => !String.IsNullOrEmpty(x.Warning)) ? 1 : 0)) +
                          ((LegendValueMargin + LegendTextWidth + LegendValueWidth) * (source.Legends.Any(x => !String.IsNullOrEmpty(x.Critical)) ? 1 : 0));
        var baseX = (ChartWidth - legendWidth) / 2;
        var baseY = Height + MarginTop + MarginBottom;
        var thresholdOffset = 0;
        for (var i = 0; i < source.Legends.Count; i++)
        {
            var legend = source.Legends[i];
            var isValue1 = i < source.Value1Count;
            var isValue2 = i < source.Value1Count + source.Value2Count;

            var makerColor = BuildOption.GetValuePalette(i);
            var minValue = isValue1 ? source.FindMinValue1(i) : isValue2 ? source.FindMinValue2(i - source.Value1Count) : null;
            var maxValue = isValue1 ? source.FindMaxValue1(i) : isValue2 ? source.FindMaxValue2(i - source.Value1Count) : null;

            var hasWarning = !String.IsNullOrEmpty(legend.Warning);
            var warningValue = (hasWarning && (thresholdOffset < source.ThresholdCount)) ? source.FindThresholdValue(thresholdOffset) : null;
            var warningColor = BuildOption.GetThresholdPalette(thresholdOffset);
            thresholdOffset += hasWarning ? 1 : 0;

            var hasCritical = !String.IsNullOrEmpty(legend.Critical);
            var criticalValue = (hasCritical && (thresholdOffset < source.ThresholdCount)) ? source.FindThresholdValue(thresholdOffset) : null;
            var criticalColor = BuildOption.GetThresholdPalette(thresholdOffset);
            thresholdOffset += hasCritical ? 1 : 0;

            legends.Add(new LegendEntry
            {
                X = baseX,
                Y = baseY,
                MarkerColor = makerColor,
                MinText = minValue.HasValue ? minValue.Value.ToString(isValue1 ? BuildOption.Value1Format : BuildOption.Value2Format, CultureInfo.InvariantCulture) : "-",
                MaxText = maxValue.HasValue ? maxValue.Value.ToString(isValue1 ? BuildOption.Value1Format : BuildOption.Value2Format, CultureInfo.InvariantCulture) : "-",
                WarningColor = warningColor,
                WarningText = warningValue.HasValue ? warningValue.Value.ToString(isValue1 ? BuildOption.Value1Format : BuildOption.Value2Format, CultureInfo.InvariantCulture) : "-",
                CriticalColor = criticalColor,
                CriticalText = criticalValue.HasValue ? criticalValue.Value.ToString(isValue1 ? BuildOption.Value1Format : BuildOption.Value2Format, CultureInfo.InvariantCulture) : "-",
            });

            baseY += LegendHeight + LegendMarginY;
        }

        // No data
        if (source.Size == 0)
        {
            return;
        }

        // Create context
        var minDateTime = source.MinDateTime ?? source.GetTime(0);
        var maxDateTime = source.MaxDateTime ?? source.GetTime(source.Size - 1);
        var maxValue1 = source.MaxValue1 ?? source.CalcMax1();
        var maxValue2 = source.MaxValue2 ?? source.CalcMax2();
        var context = new BuildContext
            {
                CanvasOffsetX = CanvasLeft,
                CanvasOffsetY = CanvasTop,
                CanvasWidth = Width,
                CanvasHeight = Height,
                MinTime = minDateTime.Ticks,
                TimeRange = maxDateTime.Ticks - minDateTime.Ticks,
                TimeAxis = BuildOption.TimeAxisCalculator(maxDateTime - minDateTime).Ticks,
                MaxValue1 = maxValue1,
                Value1Axis = BuildOption.Value1AxisCalculator(maxValue1),
                MaxValue2 = maxValue2,
                Value2Axis = BuildOption.Value1AxisCalculator(maxValue2)
            };

        // X Axis
        var timeX = context.TimeAxis < TimeHour ? new DateTime(minDateTime.Year, minDateTime.Month, minDateTime.Day, minDateTime.Hour, 0, 0).Ticks : minDateTime.Date.Ticks;
        while (timeX < context.MinTime)
        {
            timeX += context.TimeAxis;
        }

        while (timeX < context.MinTime + context.TimeRange)
        {
            var date = new DateTime(timeX);
            var isMidnight = date.TimeOfDay.Ticks == 0;
            var axisX = CalcChartX(context, timeX);
            timeAxis.Add(new AxisEntry
                {
                    DrawLine = timeX > context.MinTime && axisX <= context.CanvasOffsetX + context.CanvasWidth,
                    LineColor = isMidnight ? AxisLineColor2 : AxisLineColor,
                    Position = axisX,
                    Text = date.ToString(isMidnight ? BuildOption.DateFormat : BuildOption.TimeFormat, CultureInfo.InvariantCulture)
                });

            timeX += context.TimeAxis;
        }

        // Y Axis
        var axisY = 0d;
        while (axisY + context.Value1Axis <= context.MaxValue1)
        {
            axisY += context.Value1Axis;

            value1Axis.Add(new AxisEntry
                {
                    DrawLine = axisY < context.MaxValue1,
                    LineColor = AxisLineColor,
                    Position = CalcChartY1(context, axisY),
                    Text = axisY.ToString(BuildOption.Value1Format, CultureInfo.InvariantCulture)
                });
        }

        axisY = 0d;
        while (axisY + context.Value2Axis <= context.MaxValue2)
        {
            axisY += context.Value2Axis;

            value2Axis.Add(new AxisEntry
                {
                    DrawLine = false,
                    LineColor = AxisLineColor,
                    Position = CalcChartY2(context, axisY),
                    Text = axisY.ToString(BuildOption.Value2Format, CultureInfo.InvariantCulture)
                });
        }

        // No path
        if (source.Size == 1)
        {
            return;
        }

        // Chart(Value1)
        for (var item = 0; item < source.Value1Count; item++)
        {
            var builder = new ValuePathDataBuilder(source.Size);

            for (var index = 0; index < source.Size; index++)
            {
                var value = source.GetValue1(item, index);
                if (value.HasValue)
                {
                    builder.Add(CalcChartX(context, source.GetTime(index).Ticks), CalcChartY1(context, value.Value));
                }
            }

            if (!builder.IsEmpty)
            {
                lines.Add(new PathEntry
                    {
                        Width = ValuePathWidth,
                        Color = BuildOption.GetValuePalette(item),
                        Data = builder.ToString()
                    });
            }
        }

        // Chart(Value2)
        for (var item = 0; item < source.Value2Count; item++)
        {
            var builder = new ValuePathDataBuilder(source.Size);

            for (var index = 0; index < source.Size; index++)
            {
                var value = source.GetValue2(item, index);
                if (value.HasValue)
                {
                    builder.Add(CalcChartX(context, source.GetTime(index).Ticks), CalcChartY2(context, value.Value));
                }
            }

            if (!builder.IsEmpty)
            {
                lines.Add(new PathEntry
                    {
                        Width = ValuePathWidth,
                        Color = BuildOption.GetValuePalette(item + source.Value1Count),
                        Data = builder.ToString()
                    });
            }
        }

        // Chart(Threshold)
        for (var item = 0; item < source.ThresholdCount; item++)
        {
            var builder = new ThresholdPathDataBuilder(source.Size);

            for (var index = 0; index < source.Size; index++)
            {
                var value = source.GetThreshold(item, index);
                builder.Add(CalcChartX(context, source.GetTime(index).Ticks), CalcChartY1(context, value));
            }

            builder.Flush();

            lines.Add(new PathEntry
                {
                    Width = ThresholdPathWidth,
                    Color = BuildOption.GetThresholdPalette(item),
                    Data = builder.ToString()
                });
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static double CalcChartX(BuildContext context, long tick) =>
        ((double)(tick - context.MinTime) / context.TimeRange * context.CanvasWidth) + context.CanvasOffsetX;

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static double CalcChartY1(BuildContext context, double value) =>
        context.CanvasOffsetY + context.CanvasHeight - (value / context.MaxValue1 * context.CanvasHeight);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static double CalcChartY2(BuildContext context, double value) =>
        context.CanvasOffsetY + context.CanvasHeight - (value / context.MaxValue2 * context.CanvasHeight);

    // BuildContext
    private class BuildContext
    {
        public double CanvasOffsetX { get; init; }

        public double CanvasOffsetY { get; init; }

        public double CanvasWidth { get; init; }

        public double CanvasHeight { get; init; }

        public long MinTime { get; init; }

        public long TimeRange { get; init; }

        public long TimeAxis { get; init; }

        public double MaxValue1 { get; init; }

        public double Value1Axis { get; init; }

        public double MaxValue2 { get; init; }

        public double Value2Axis { get; init; }
    }

    // Legend
    private class LegendEntry
    {
        public double X { get; init; }

        public double Y { get; init; }

        public string MarkerColor { get; init; } = default!;

        public string MinText { get; init; } = default!;

        public string MaxText { get; init; } = default!;

        public string WarningColor { get; init; } = default!;

        public string WarningText { get; init; } = default!;

        public string CriticalColor { get; init; } = default!;

        public string CriticalText { get; init; } = default!;
    }

    // Axis
    private class AxisEntry
    {
        public bool DrawLine { get; init; }

        public double Position { get; init; }

        public string LineColor { get; init; } = default!;

        public string Text { get; init; } = default!;
    }

    // Path
    private class PathEntry
    {
        public double Width { get; init; }

        public string Color { get; init; } = default!;

        public string Data { get; init; } = default!;
    }

    // Value path builder
    private class ValuePathDataBuilder
    {
        private readonly StringBuilder builder;

        public bool IsEmpty => builder.Length == 0;

        public ValuePathDataBuilder(int hint)
        {
            builder = new StringBuilder(20 * hint);
        }

        public void Add(double x, double y)
        {
            builder.Append(builder.Length == 0 ? $"M{x:0.##},{y:0.##}" : $" L{x:0.##},{y:0.##}");
        }

        public override string ToString() => builder.ToString();
    }

    // Threshold path builder
    private class ThresholdPathDataBuilder
    {
        private readonly StringBuilder builder;

        private double lastX;

        private double lastY;

        private bool skip;

        public ThresholdPathDataBuilder(int hint)
        {
            builder = new StringBuilder(20 * hint);
        }

        public void Add(double x, double y)
        {
            if (builder.Length == 0)
            {
                builder.Append(CultureInfo.InvariantCulture, $"M{x:0.##},{y:0.##}");
            }
            else
            {
                // ReSharper disable once CompareOfFloatsByEqualityOperator
                if (lastY == y)
                {
                    skip = true;
                }
                else
                {
                    if (skip)
                    {
                        builder.Append(CultureInfo.InvariantCulture, $" L{x:0.##},{lastY:0.##}");
                        skip = false;
                    }

                    builder.Append(CultureInfo.InvariantCulture, $" L{x:0.##},{y:0.##}");
                }
            }

            lastY = y;
            lastX = x;
        }

        public void Flush()
        {
            if (skip)
            {
                builder.Append(CultureInfo.InvariantCulture, $" L{lastX:0.##},{lastY:0.##}");
                skip = false;
            }
        }

        public override string ToString() => builder.ToString();
    }
}
